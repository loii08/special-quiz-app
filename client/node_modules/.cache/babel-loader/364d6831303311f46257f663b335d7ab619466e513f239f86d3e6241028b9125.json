{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chanl\\\\Documents\\\\Kenneth\\\\html\\\\client\\\\src\\\\components\\\\QuoteCard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ImageRewardCard from './ImageRewardCard.js';\nimport MessageRewardCard from './MessageRewardCard.js';\nimport ImageDetailModal from './ImageDetailModal.js';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst localQuotes = [{\n  text: \"The only way to do great work is to love what you do.\",\n  author: \"Steve Jobs\"\n}, {\n  text: \"Life is what happens to you while you're busy making other plans.\",\n  author: \"John Lennon\"\n}, {\n  text: \"The purpose of our lives is to be happy.\",\n  author: \"Dalai Lama\"\n}, {\n  text: \"Get busy living or get busy dying.\",\n  author: \"Stephen King\"\n}, {\n  text: \"You only live once, but if you do it right, once is enough.\",\n  author: \"Mae West\"\n}];\nconst QuoteCard = ({\n  unlockedReward\n}) => {\n  _s();\n  const [quote, setQuote] = useState({\n    text: 'Loading...',\n    author: ''\n  });\n  const [source, setSource] = useState('local'); // 'local' or 'api'\n  const [isImageModalOpen, setImageModalOpen] = useState(false);\n  useEffect(() => {\n    const fetchQuote = async () => {\n      try {\n        // Note: The realinspire API seems to be down. \n        // This will likely fail and fall back to local quotes.\n        const response = await fetch(\"https://api.realinspire.live/v1/quotes/random\");\n        if (!response.ok) throw new Error('Network response was not ok.');\n        const data = await response.json();\n        if (data && data.length > 0) {\n          setQuote({\n            text: data[0].content,\n            author: data[0].author\n          });\n          setSource('api');\n        } else {\n          throw new Error('API returned no data');\n        }\n      } catch (error) {\n        console.error(\"Failed to fetch API quote, using fallback:\", error);\n        const fallbackQuote = localQuotes[Math.floor(Math.random() * localQuotes.length)];\n        setQuote({\n          text: fallbackQuote.text,\n          author: fallbackQuote.author\n        });\n        setSource('local');\n      }\n    };\n    fetchQuote(); // Fetch on initial render\n\n    const intervalId = setInterval(fetchQuote, 10000); // Fetch a new quote every 10 seconds\n\n    return () => clearInterval(intervalId); // Cleanup on component unmount\n  }, []);\n\n  // If an unlocked reward is passed, render it instead of the quote\n  if (unlockedReward && unlockedReward.content) {\n    const {\n      imageUrl,\n      messageBody\n    } = unlockedReward.content;\n    if (imageUrl) {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(ImageRewardCard, {\n          imageUrl: imageUrl,\n          title: unlockedReward.content.messageTitle,\n          onClick: () => setImageModalOpen(true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), isImageModalOpen && /*#__PURE__*/_jsxDEV(ImageDetailModal, {\n          ...unlockedReward.content,\n          onClose: () => setImageModalOpen(false)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true);\n    }\n    if (messageBody) {\n      return /*#__PURE__*/_jsxDEV(MessageRewardCard, {\n        title: unlockedReward.content.messageTitle,\n        body: messageBody\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 20\n      }, this);\n    }\n  }\n\n  // Default view: show the random quote\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card quote-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `quote-source-indicator ${source}-source`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"blockquote\", {\n      className: \"quote-text\",\n      children: quote.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), quote.author && /*#__PURE__*/_jsxDEV(\"figcaption\", {\n      className: \"quote-author\",\n      children: [\"\\u2014 \", quote.author]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n_s(QuoteCard, \"sTFfDd8O+7hAreZksq1Q+/RVQ+A=\");\n_c = QuoteCard;\nexport default QuoteCard;\nvar _c;\n$RefreshReg$(_c, \"QuoteCard\");","map":{"version":3,"names":["React","useState","useEffect","ImageRewardCard","MessageRewardCard","ImageDetailModal","jsxDEV","_jsxDEV","Fragment","_Fragment","localQuotes","text","author","QuoteCard","unlockedReward","_s","quote","setQuote","source","setSource","isImageModalOpen","setImageModalOpen","fetchQuote","response","fetch","ok","Error","data","json","length","content","error","console","fallbackQuote","Math","floor","random","intervalId","setInterval","clearInterval","imageUrl","messageBody","children","title","messageTitle","onClick","fileName","_jsxFileName","lineNumber","columnNumber","onClose","body","className","_c","$RefreshReg$"],"sources":["C:/Users/chanl/Documents/Kenneth/html/client/src/components/QuoteCard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ImageRewardCard from './ImageRewardCard.js';\r\nimport MessageRewardCard from './MessageRewardCard.js';\r\nimport ImageDetailModal from './ImageDetailModal.js';\r\n\r\nconst localQuotes = [\r\n    { text: \"The only way to do great work is to love what you do.\", author: \"Steve Jobs\" },\r\n    { text: \"Life is what happens to you while you're busy making other plans.\", author: \"John Lennon\" },\r\n    { text: \"The purpose of our lives is to be happy.\", author: \"Dalai Lama\" },\r\n    { text: \"Get busy living or get busy dying.\", author: \"Stephen King\" },\r\n    { text: \"You only live once, but if you do it right, once is enough.\", author: \"Mae West\" },\r\n];\r\n\r\nconst QuoteCard = ({ unlockedReward }) => {\r\n    const [quote, setQuote] = useState({ text: 'Loading...', author: '' });\r\n    const [source, setSource] = useState('local'); // 'local' or 'api'\r\n    const [isImageModalOpen, setImageModalOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchQuote = async () => {\r\n            try {\r\n                // Note: The realinspire API seems to be down. \r\n                // This will likely fail and fall back to local quotes.\r\n                const response = await fetch(\"https://api.realinspire.live/v1/quotes/random\");\r\n                if (!response.ok) throw new Error('Network response was not ok.');\r\n                \r\n                const data = await response.json();\r\n                if (data && data.length > 0) {\r\n                    setQuote({ text: data[0].content, author: data[0].author });\r\n                    setSource('api');\r\n                } else {\r\n                    throw new Error('API returned no data');\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch API quote, using fallback:\", error);\r\n                const fallbackQuote = localQuotes[Math.floor(Math.random() * localQuotes.length)];\r\n                setQuote({ text: fallbackQuote.text, author: fallbackQuote.author });\r\n                setSource('local');\r\n            }\r\n        };\r\n\r\n        fetchQuote(); // Fetch on initial render\r\n\r\n        const intervalId = setInterval(fetchQuote, 10000); // Fetch a new quote every 10 seconds\r\n\r\n        return () => clearInterval(intervalId); // Cleanup on component unmount\r\n    }, []);\r\n\r\n    // If an unlocked reward is passed, render it instead of the quote\r\n    if (unlockedReward && unlockedReward.content) {\r\n        const { imageUrl, messageBody } = unlockedReward.content;\r\n\r\n        if (imageUrl) {\r\n            return (\r\n                <>\r\n                    <ImageRewardCard \r\n                        imageUrl={imageUrl} \r\n                        title={unlockedReward.content.messageTitle}\r\n                        onClick={() => setImageModalOpen(true)}\r\n                    />\r\n                    {isImageModalOpen && (\r\n                        <ImageDetailModal \r\n                            {...unlockedReward.content}\r\n                            onClose={() => setImageModalOpen(false)}\r\n                        />\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n        if (messageBody) {\r\n            return <MessageRewardCard title={unlockedReward.content.messageTitle} body={messageBody} />;\r\n        }\r\n    }\r\n\r\n    // Default view: show the random quote\r\n    return (\r\n        <div className=\"card quote-card\">\r\n            <div className={`quote-source-indicator ${source}-source`}></div>\r\n            <blockquote className=\"quote-text\">{quote.text}</blockquote>\r\n            {quote.author && <figcaption className=\"quote-author\">â€” {quote.author}</figcaption>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuoteCard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}