{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chanl\\\\Documents\\\\Kenneth\\\\html\\\\client\\\\src\\\\components\\\\QuizModal.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { spawn as launchConfetti } from '../utils/canvasConfetti.js';\nimport { createFallingEmojis } from '../utils/domAnimations.js';\nimport './QuizModal.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QuizModal = ({\n  gameData,\n  onSuccess,\n  onClose\n}) => {\n  _s();\n  const [score, setScore] = useState(0);\n  const [currentQuestion, setCurrentQuestion] = useState(null);\n  const [userAnswer, setUserAnswer] = useState('');\n  const [wrongAnswerCount, setWrongAnswerCount] = useState(0);\n  const [availableQuestions, setAvailableQuestions] = useState([]);\n  const [availableWrongMessages, setAvailableWrongMessages] = useState([]);\n  const [globalWrongMessages, setGlobalWrongMessages] = useState([]);\n  const [availableCancelMessages, setAvailableCancelMessages] = useState([]);\n  const [globalCancelMessages, setGlobalCancelMessages] = useState([]);\n  const [modalState, setModalState] = useState('asking'); // asking, correct, wrong, cancelled, won\n  const [resultData, setResultData] = useState({\n    emoji: '',\n    msg: ''\n  });\n  const inputRef = useRef(null);\n  const modalContentRef = useRef(null); // Ref for the entire modal content\n  const emojiRef = useRef(null); // Ref for the result emoji element\n\n  const scoreGoal = (gameData === null || gameData === void 0 ? void 0 : gameData.scoreGoal) || 1; // Use scoreGoal from props, with a safe default\n\n  useEffect(() => {\n    if (gameData && gameData.questions.length > 0) {\n      // On initial load, set the available questions and ask the first one.\n      if (availableQuestions.length === 0) {\n        const initialQuestions = [...gameData.questions];\n        setAvailableQuestions(initialQuestions);\n        askNewQuestion(initialQuestions);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [gameData]);\n\n  // Effect to fetch global messages from the database\n  useEffect(() => {\n    const fetchMessages = async () => {\n      try {\n        const [wrongRes, cancelRes] = await Promise.all([fetch(`${process.env.REACT_APP_API_URL}/api/messages/wrong`), fetch(`${process.env.REACT_APP_API_URL}/api/messages/cancel`)]);\n        setGlobalWrongMessages(await wrongRes.json());\n        setGlobalCancelMessages(await cancelRes.json());\n      } catch (error) {\n        console.error(\"Failed to fetch global messages:\", error);\n      }\n    };\n    fetchMessages();\n  }, []);\n\n  // Effect to auto-focus the input field when the modal is in the 'asking' state\n  useEffect(() => {\n    if (modalState === 'asking' && inputRef.current) {\n      // Use a small timeout to ensure the element is rendered before focusing\n      setTimeout(() => {\n        inputRef.current.focus();\n      }, 100);\n    }\n  }, [modalState]);\n  const handleAnswerSubmit = () => {\n    // Guard against submitting before a question is loaded\n    if (!userAnswer.trim() || !currentQuestion) return;\n    if (userAnswer.trim().toLowerCase() === currentQuestion.answer.toLowerCase()) {\n      const newScore = score + 1;\n      setScore(newScore);\n      const newQuestionsPool = availableQuestions.filter(q => q._id !== currentQuestion._id); // Use _id from MongoDB\n      setAvailableQuestions(newQuestionsPool);\n      setUserAnswer('');\n      if (newScore >= scoreGoal) {\n        setResultData({\n          emoji: 'ðŸŽ‰',\n          msg: gameData.congratulationsMessage || \"Congratulations! You did it! ðŸŽ‰\"\n        });\n        setModalState('won');\n        // Delay animation to let the modal render\n        setTimeout(() => triggerBurst(200), 50);\n      } else {\n        setResultData({\n          emoji: 'âœ…',\n          msg: `Correct! Only ${scoreGoal - newScore} more to go!`\n        });\n        triggerBurst(80); // Correct answer animation\n        setModalState('correct');\n        // Pre-select the next question from the new, smaller pool\n        if (newQuestionsPool.length > 0) {\n          askNewQuestion(newQuestionsPool);\n        }\n      }\n    } else {\n      setWrongAnswerCount(prevCount => prevCount + 1);\n\n      // Use custom messages if available, otherwise use a default\n      let messagePool = availableWrongMessages.length > 0 ? [...availableWrongMessages] : [...globalWrongMessages];\n      if (messagePool.length === 0) {\n        // If we've run out of unique messages, reset the pool\n        messagePool = globalWrongMessages.length > 0 ? [...globalWrongMessages] : [{\n          msg: \"That's not quite right. Try again!\",\n          emoji: \"ðŸ¤”\"\n        }];\n      }\n      const randomMsgIndex = Math.floor(Math.random() * messagePool.length);\n      const randomMsg = messagePool[randomMsgIndex];\n      setAvailableWrongMessages(messagePool.filter((_, index) => index !== randomMsgIndex));\n      setResultData(randomMsg);\n      setModalState('wrong');\n    }\n  };\n  const handleNextQuestion = () => {\n    setUserAnswer('');\n    setModalState('asking');\n  };\n  const handleTryAgain = () => {\n    askNewQuestion(availableQuestions); // Explicitly select a new random question\n    setUserAnswer('');\n    setModalState('asking');\n  };\n  const askNewQuestion = questionsPool => {\n    if (questionsPool.length > 0) {\n      const questionIndex = Math.floor(Math.random() * questionsPool.length);\n      setCurrentQuestion(questionsPool[questionIndex]);\n    }\n  };\n  const handleCancel = () => {\n    // Use custom messages if available, otherwise use a default\n    let messagePool = availableCancelMessages.length > 0 ? [...availableCancelMessages] : [...globalCancelMessages];\n    if (messagePool.length === 0) {\n      // If we've run out of unique messages, reset the pool\n      messagePool = globalCancelMessages.length > 0 ? [...globalCancelMessages] : [{\n        msg: \"Quitting so soon?\",\n        emoji: \"ðŸ˜œ\"\n      }];\n    }\n    const randomMsgIndex = Math.floor(Math.random() * messagePool.length);\n    const randomMsg = messagePool[randomMsgIndex];\n    setAvailableCancelMessages(messagePool.filter((_, index) => index !== randomMsgIndex));\n    createFallingEmojis(12); // Use the new falling emoji animation\n    setResultData(randomMsg);\n    setModalState('cancelled');\n  };\n  const triggerBurst = count => {\n    if (modalContentRef.current) {\n      const rect = modalContentRef.current.getBoundingClientRect();\n      launchConfetti(rect.left + rect.width / 2, rect.top + rect.height / 2, count);\n    }\n  };\n  const handleIconClose = () => {\n    // If on the 'wrong' screen, or if they have any wrong answers, show cancel message.\n    if (modalState === 'wrong' || wrongAnswerCount > 0) {\n      handleCancel(); // If on the 'wrong' screen, 'X' should act as 'Cancel'\n    } else {\n      onClose(); // Otherwise, it just closes the modal\n    }\n  };\n  const renderContent = () => {\n    switch (modalState) {\n      case 'correct':\n      case 'wrong':\n      case 'cancelled':\n      case 'won':\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"result-modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            ref: emojiRef,\n            className: \"result-emoji\",\n            role: \"img\",\n            \"aria-label\": \"Result emoji\",\n            children: resultData.emoji\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: resultData.msg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-buttons\",\n            children: [modalState === 'correct' && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleNextQuestion,\n              children: \"Next Question\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 58\n            }, this), modalState === 'wrong' && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleTryAgain,\n              children: \"Try Again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 56\n            }, this), modalState === 'cancelled' && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"close-btn\",\n              onClick: onClose,\n              children: \"Okay\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 60\n            }, this), modalState === 'won' && /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: onSuccess,\n              children: \"Okay\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 54\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this);\n      case 'asking':\n      default:\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: currentQuestion === null || currentQuestion === void 0 ? void 0 : currentQuestion.question\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-score\",\n            children: [\"Score: \", score, \" / \", scoreGoal]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            ref: inputRef,\n            type: \"text\",\n            value: userAnswer,\n            onChange: e => setUserAnswer(e.target.value),\n            onKeyUp: e => e.key === 'Enter' && handleAnswerSubmit(),\n            placeholder: \"Your answer...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-buttons\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleAnswerSubmit,\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal-overlay\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: modalContentRef,\n      className: \"modal-content\",\n      children: [modalState !== 'correct' && modalState !== 'cancelled' && modalState !== 'won' && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"modal-close-icon\",\n        onClick: handleIconClose,\n        \"aria-label\": \"Close modal\",\n        children: \"\\xD7\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 21\n      }, this), renderContent()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 9\n  }, this);\n};\n_s(QuizModal, \"n0Wk5X4WkHRwCyj4+q4c3g+AJXA=\");\n_c = QuizModal;\nexport default QuizModal;\nvar _c;\n$RefreshReg$(_c, \"QuizModal\");","map":{"version":3,"names":["React","useState","useEffect","useRef","spawn","launchConfetti","createFallingEmojis","jsxDEV","_jsxDEV","Fragment","_Fragment","QuizModal","gameData","onSuccess","onClose","_s","score","setScore","currentQuestion","setCurrentQuestion","userAnswer","setUserAnswer","wrongAnswerCount","setWrongAnswerCount","availableQuestions","setAvailableQuestions","availableWrongMessages","setAvailableWrongMessages","globalWrongMessages","setGlobalWrongMessages","availableCancelMessages","setAvailableCancelMessages","globalCancelMessages","setGlobalCancelMessages","modalState","setModalState","resultData","setResultData","emoji","msg","inputRef","modalContentRef","emojiRef","scoreGoal","questions","length","initialQuestions","askNewQuestion","fetchMessages","wrongRes","cancelRes","Promise","all","fetch","process","env","REACT_APP_API_URL","json","error","console","current","setTimeout","focus","handleAnswerSubmit","trim","toLowerCase","answer","newScore","newQuestionsPool","filter","q","_id","congratulationsMessage","triggerBurst","prevCount","messagePool","randomMsgIndex","Math","floor","random","randomMsg","_","index","handleNextQuestion","handleTryAgain","questionsPool","questionIndex","handleCancel","count","rect","getBoundingClientRect","left","width","top","height","handleIconClose","renderContent","className","children","ref","role","fileName","_jsxFileName","lineNumber","columnNumber","onClick","question","type","value","onChange","e","target","onKeyUp","key","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/chanl/Documents/Kenneth/html/client/src/components/QuizModal.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { spawn as launchConfetti } from '../utils/canvasConfetti.js';\r\nimport { createFallingEmojis } from '../utils/domAnimations.js';\r\n\r\nimport './QuizModal.css';\r\nconst QuizModal = ({ gameData, onSuccess, onClose }) => {\r\n    const [score, setScore] = useState(0);\r\n    const [currentQuestion, setCurrentQuestion] = useState(null);\r\n    const [userAnswer, setUserAnswer] = useState('');\r\n    const [wrongAnswerCount, setWrongAnswerCount] = useState(0);\r\n    const [availableQuestions, setAvailableQuestions] = useState([]);\r\n    const [availableWrongMessages, setAvailableWrongMessages] = useState([]);\r\n    const [globalWrongMessages, setGlobalWrongMessages] = useState([]);\r\n    const [availableCancelMessages, setAvailableCancelMessages] = useState([]);\r\n    const [globalCancelMessages, setGlobalCancelMessages] = useState([]);\r\n    const [modalState, setModalState] = useState('asking'); // asking, correct, wrong, cancelled, won\r\n    const [resultData, setResultData] = useState({ emoji: '', msg: '' });\r\n    const inputRef = useRef(null);\r\n    const modalContentRef = useRef(null); // Ref for the entire modal content\r\n    const emojiRef = useRef(null); // Ref for the result emoji element\r\n\r\n    const scoreGoal = gameData?.scoreGoal || 1; // Use scoreGoal from props, with a safe default\r\n\r\n    useEffect(() => {\r\n        if (gameData && gameData.questions.length > 0) {\r\n            // On initial load, set the available questions and ask the first one.\r\n            if (availableQuestions.length === 0) {\r\n                const initialQuestions = [...gameData.questions];\r\n                setAvailableQuestions(initialQuestions);\r\n                askNewQuestion(initialQuestions);\r\n            }\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [gameData]);\r\n\r\n    // Effect to fetch global messages from the database\r\n    useEffect(() => {\r\n        const fetchMessages = async () => {\r\n            try {\r\n                const [wrongRes, cancelRes] = await Promise.all([\r\n                    fetch(`${process.env.REACT_APP_API_URL}/api/messages/wrong`),\r\n                    fetch(`${process.env.REACT_APP_API_URL}/api/messages/cancel`)\r\n                ]);\r\n                setGlobalWrongMessages(await wrongRes.json());\r\n                setGlobalCancelMessages(await cancelRes.json());\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch global messages:\", error);\r\n            }\r\n        };\r\n        fetchMessages();\r\n    }, []);\r\n\r\n    // Effect to auto-focus the input field when the modal is in the 'asking' state\r\n    useEffect(() => {\r\n        if (modalState === 'asking' && inputRef.current) {\r\n            // Use a small timeout to ensure the element is rendered before focusing\r\n            setTimeout(() => {\r\n                inputRef.current.focus();\r\n            }, 100);\r\n        }\r\n    }, [modalState]);\r\n\r\n    const handleAnswerSubmit = () => {\r\n        // Guard against submitting before a question is loaded\r\n        if (!userAnswer.trim() || !currentQuestion) return;\r\n\r\n        if (userAnswer.trim().toLowerCase() === currentQuestion.answer.toLowerCase()) {\r\n            const newScore = score + 1;\r\n            setScore(newScore);\r\n            \r\n            const newQuestionsPool = availableQuestions.filter(q => q._id !== currentQuestion._id); // Use _id from MongoDB\r\n            setAvailableQuestions(newQuestionsPool);\r\n            setUserAnswer('');\r\n\r\n            if (newScore >= scoreGoal) {\r\n                setResultData({ emoji: 'ðŸŽ‰', msg: gameData.congratulationsMessage || \"Congratulations! You did it! ðŸŽ‰\" });\r\n                setModalState('won');\r\n                // Delay animation to let the modal render\r\n                setTimeout(() => triggerBurst(200), 50);\r\n            } else {\r\n                setResultData({ emoji: 'âœ…', msg: `Correct! Only ${scoreGoal - newScore} more to go!` });\r\n                triggerBurst(80); // Correct answer animation\r\n                setModalState('correct');\r\n                // Pre-select the next question from the new, smaller pool\r\n                if (newQuestionsPool.length > 0) {\r\n                    askNewQuestion(newQuestionsPool);\r\n                }\r\n            }\r\n        } else {\r\n            setWrongAnswerCount(prevCount => prevCount + 1);\r\n\r\n            // Use custom messages if available, otherwise use a default\r\n            let messagePool = availableWrongMessages.length > 0 ? [...availableWrongMessages] : [...globalWrongMessages];\r\n\r\n            if (messagePool.length === 0) {\r\n                // If we've run out of unique messages, reset the pool\r\n                messagePool = globalWrongMessages.length > 0 ? [...globalWrongMessages] : [{ msg: \"That's not quite right. Try again!\", emoji: \"ðŸ¤”\" }];\r\n            }\r\n\r\n            const randomMsgIndex = Math.floor(Math.random() * messagePool.length);\r\n            const randomMsg = messagePool[randomMsgIndex];\r\n            setAvailableWrongMessages(messagePool.filter((_, index) => index !== randomMsgIndex));\r\n            setResultData(randomMsg);\r\n            setModalState('wrong');\r\n        }\r\n    };\r\n\r\n    const handleNextQuestion = () => {\r\n        setUserAnswer('');\r\n        setModalState('asking');\r\n    };\r\n\r\n    const handleTryAgain = () => {\r\n        askNewQuestion(availableQuestions); // Explicitly select a new random question\r\n        setUserAnswer('');\r\n        setModalState('asking');\r\n    };\r\n\r\n    const askNewQuestion = (questionsPool) => {\r\n        if (questionsPool.length > 0) {\r\n            const questionIndex = Math.floor(Math.random() * questionsPool.length);\r\n            setCurrentQuestion(questionsPool[questionIndex]);\r\n        }\r\n    };\r\n\r\n    const handleCancel = () => {\r\n        // Use custom messages if available, otherwise use a default\r\n        let messagePool = availableCancelMessages.length > 0 ? [...availableCancelMessages] : [...globalCancelMessages];\r\n\r\n        if (messagePool.length === 0) {\r\n            // If we've run out of unique messages, reset the pool\r\n            messagePool = globalCancelMessages.length > 0 ? [...globalCancelMessages] : [{ msg: \"Quitting so soon?\", emoji: \"ðŸ˜œ\" }];\r\n        }\r\n\r\n        const randomMsgIndex = Math.floor(Math.random() * messagePool.length);\r\n        const randomMsg = messagePool[randomMsgIndex];\r\n        setAvailableCancelMessages(messagePool.filter((_, index) => index !== randomMsgIndex));\r\n\r\n        createFallingEmojis(12); // Use the new falling emoji animation\r\n        setResultData(randomMsg);\r\n        setModalState('cancelled');\r\n    };\r\n\r\n    const triggerBurst = (count) => {\r\n        if (modalContentRef.current) {\r\n            const rect = modalContentRef.current.getBoundingClientRect();\r\n            launchConfetti(rect.left + rect.width / 2, rect.top + rect.height / 2, count);\r\n        }\r\n    };\r\n\r\n    const handleIconClose = () => {\r\n        // If on the 'wrong' screen, or if they have any wrong answers, show cancel message.\r\n        if (modalState === 'wrong' || wrongAnswerCount > 0) {\r\n            handleCancel(); // If on the 'wrong' screen, 'X' should act as 'Cancel'\r\n        } else {\r\n            onClose(); // Otherwise, it just closes the modal\r\n        }\r\n    };\r\n\r\n    const renderContent = () => {\r\n        switch (modalState) {\r\n            case 'correct':\r\n            case 'wrong':\r\n            case 'cancelled':\r\n            case 'won':\r\n                return (\r\n                    <div className=\"result-modal-content\">\r\n                        <span ref={emojiRef} className=\"result-emoji\" role=\"img\" aria-label=\"Result emoji\">{resultData.emoji}</span>\r\n                        <p>{resultData.msg}</p>\r\n                        <div className=\"modal-buttons\">\r\n                            {modalState === 'correct' && <button onClick={handleNextQuestion}>Next Question</button>}\r\n                            {modalState === 'wrong' && <button onClick={handleTryAgain}>Try Again</button>} \r\n                            {modalState === 'cancelled' && <button className=\"close-btn\" onClick={onClose}>Okay</button>}\r\n                            {modalState === 'won' && <button onClick={onSuccess}>Okay</button>}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            case 'asking':\r\n            default:\r\n                return (\r\n                    <>\r\n                        <h3>{currentQuestion?.question}</h3>\r\n                        <div className=\"modal-score\">Score: {score} / {scoreGoal}</div>\r\n                        <input\r\n                            ref={inputRef}\r\n                            type=\"text\"\r\n                            value={userAnswer}\r\n                            onChange={(e) => setUserAnswer(e.target.value)}\r\n                            onKeyUp={(e) => e.key === 'Enter' && handleAnswerSubmit()}\r\n                            placeholder=\"Your answer...\"\r\n                        />\r\n                        <div className=\"modal-buttons\">\r\n                            <button onClick={handleAnswerSubmit}>Submit</button>\r\n                        </div>\r\n                    </>\r\n                );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"modal-overlay\">\r\n            <div ref={modalContentRef} className=\"modal-content\">\r\n                {modalState !== 'correct' && modalState !== 'cancelled' && modalState !== 'won' && (\r\n                    <button className=\"modal-close-icon\" onClick={handleIconClose} aria-label=\"Close modal\">\r\n                        &times;\r\n                    </button>\r\n                )}\r\n                {renderContent()}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuizModal;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,KAAK,IAAIC,cAAc,QAAQ,4BAA4B;AACpE,SAASC,mBAAmB,QAAQ,2BAA2B;AAE/D,OAAO,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACzB,MAAMC,SAAS,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,SAAS;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACpD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAM,CAACiB,eAAe,EAAEC,kBAAkB,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACmB,UAAU,EAAEC,aAAa,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACqB,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC;EAC3D,MAAM,CAACuB,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGxB,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACyB,sBAAsB,EAAEC,yBAAyB,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EACxE,MAAM,CAAC2B,mBAAmB,EAAEC,sBAAsB,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAClE,MAAM,CAAC6B,uBAAuB,EAAEC,0BAA0B,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EAC1E,MAAM,CAAC+B,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGhC,QAAQ,CAAC,EAAE,CAAC;EACpE,MAAM,CAACiC,UAAU,EAAEC,aAAa,CAAC,GAAGlC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;EACxD,MAAM,CAACmC,UAAU,EAAEC,aAAa,CAAC,GAAGpC,QAAQ,CAAC;IAAEqC,KAAK,EAAE,EAAE;IAAEC,GAAG,EAAE;EAAG,CAAC,CAAC;EACpE,MAAMC,QAAQ,GAAGrC,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMsC,eAAe,GAAGtC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;EACtC,MAAMuC,QAAQ,GAAGvC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE/B,MAAMwC,SAAS,GAAG,CAAA/B,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAE+B,SAAS,KAAI,CAAC,CAAC,CAAC;;EAE5CzC,SAAS,CAAC,MAAM;IACZ,IAAIU,QAAQ,IAAIA,QAAQ,CAACgC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;MAC3C;MACA,IAAIrB,kBAAkB,CAACqB,MAAM,KAAK,CAAC,EAAE;QACjC,MAAMC,gBAAgB,GAAG,CAAC,GAAGlC,QAAQ,CAACgC,SAAS,CAAC;QAChDnB,qBAAqB,CAACqB,gBAAgB,CAAC;QACvCC,cAAc,CAACD,gBAAgB,CAAC;MACpC;IACJ;IACA;EACJ,CAAC,EAAE,CAAClC,QAAQ,CAAC,CAAC;;EAEd;EACAV,SAAS,CAAC,MAAM;IACZ,MAAM8C,aAAa,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACA,MAAM,CAACC,QAAQ,EAAEC,SAAS,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAC5CC,KAAK,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,qBAAqB,CAAC,EAC5DH,KAAK,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,sBAAsB,CAAC,CAChE,CAAC;QACF3B,sBAAsB,CAAC,MAAMoB,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAAC;QAC7CxB,uBAAuB,CAAC,MAAMiB,SAAS,CAACO,IAAI,CAAC,CAAC,CAAC;MACnD,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC5D;IACJ,CAAC;IACDV,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA9C,SAAS,CAAC,MAAM;IACZ,IAAIgC,UAAU,KAAK,QAAQ,IAAIM,QAAQ,CAACoB,OAAO,EAAE;MAC7C;MACAC,UAAU,CAAC,MAAM;QACbrB,QAAQ,CAACoB,OAAO,CAACE,KAAK,CAAC,CAAC;MAC5B,CAAC,EAAE,GAAG,CAAC;IACX;EACJ,CAAC,EAAE,CAAC5B,UAAU,CAAC,CAAC;EAEhB,MAAM6B,kBAAkB,GAAGA,CAAA,KAAM;IAC7B;IACA,IAAI,CAAC3C,UAAU,CAAC4C,IAAI,CAAC,CAAC,IAAI,CAAC9C,eAAe,EAAE;IAE5C,IAAIE,UAAU,CAAC4C,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,KAAK/C,eAAe,CAACgD,MAAM,CAACD,WAAW,CAAC,CAAC,EAAE;MAC1E,MAAME,QAAQ,GAAGnD,KAAK,GAAG,CAAC;MAC1BC,QAAQ,CAACkD,QAAQ,CAAC;MAElB,MAAMC,gBAAgB,GAAG5C,kBAAkB,CAAC6C,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKrD,eAAe,CAACqD,GAAG,CAAC,CAAC,CAAC;MACxF9C,qBAAqB,CAAC2C,gBAAgB,CAAC;MACvC/C,aAAa,CAAC,EAAE,CAAC;MAEjB,IAAI8C,QAAQ,IAAIxB,SAAS,EAAE;QACvBN,aAAa,CAAC;UAAEC,KAAK,EAAE,IAAI;UAAEC,GAAG,EAAE3B,QAAQ,CAAC4D,sBAAsB,IAAI;QAAkC,CAAC,CAAC;QACzGrC,aAAa,CAAC,KAAK,CAAC;QACpB;QACA0B,UAAU,CAAC,MAAMY,YAAY,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC;MAC3C,CAAC,MAAM;QACHpC,aAAa,CAAC;UAAEC,KAAK,EAAE,GAAG;UAAEC,GAAG,EAAE,iBAAiBI,SAAS,GAAGwB,QAAQ;QAAe,CAAC,CAAC;QACvFM,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;QAClBtC,aAAa,CAAC,SAAS,CAAC;QACxB;QACA,IAAIiC,gBAAgB,CAACvB,MAAM,GAAG,CAAC,EAAE;UAC7BE,cAAc,CAACqB,gBAAgB,CAAC;QACpC;MACJ;IACJ,CAAC,MAAM;MACH7C,mBAAmB,CAACmD,SAAS,IAAIA,SAAS,GAAG,CAAC,CAAC;;MAE/C;MACA,IAAIC,WAAW,GAAGjD,sBAAsB,CAACmB,MAAM,GAAG,CAAC,GAAG,CAAC,GAAGnB,sBAAsB,CAAC,GAAG,CAAC,GAAGE,mBAAmB,CAAC;MAE5G,IAAI+C,WAAW,CAAC9B,MAAM,KAAK,CAAC,EAAE;QAC1B;QACA8B,WAAW,GAAG/C,mBAAmB,CAACiB,MAAM,GAAG,CAAC,GAAG,CAAC,GAAGjB,mBAAmB,CAAC,GAAG,CAAC;UAAEW,GAAG,EAAE,oCAAoC;UAAED,KAAK,EAAE;QAAK,CAAC,CAAC;MAC1I;MAEA,MAAMsC,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,WAAW,CAAC9B,MAAM,CAAC;MACrE,MAAMmC,SAAS,GAAGL,WAAW,CAACC,cAAc,CAAC;MAC7CjD,yBAAyB,CAACgD,WAAW,CAACN,MAAM,CAAC,CAACY,CAAC,EAAEC,KAAK,KAAKA,KAAK,KAAKN,cAAc,CAAC,CAAC;MACrFvC,aAAa,CAAC2C,SAAS,CAAC;MACxB7C,aAAa,CAAC,OAAO,CAAC;IAC1B;EACJ,CAAC;EAED,MAAMgD,kBAAkB,GAAGA,CAAA,KAAM;IAC7B9D,aAAa,CAAC,EAAE,CAAC;IACjBc,aAAa,CAAC,QAAQ,CAAC;EAC3B,CAAC;EAED,MAAMiD,cAAc,GAAGA,CAAA,KAAM;IACzBrC,cAAc,CAACvB,kBAAkB,CAAC,CAAC,CAAC;IACpCH,aAAa,CAAC,EAAE,CAAC;IACjBc,aAAa,CAAC,QAAQ,CAAC;EAC3B,CAAC;EAED,MAAMY,cAAc,GAAIsC,aAAa,IAAK;IACtC,IAAIA,aAAa,CAACxC,MAAM,GAAG,CAAC,EAAE;MAC1B,MAAMyC,aAAa,GAAGT,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGM,aAAa,CAACxC,MAAM,CAAC;MACtE1B,kBAAkB,CAACkE,aAAa,CAACC,aAAa,CAAC,CAAC;IACpD;EACJ,CAAC;EAED,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACvB;IACA,IAAIZ,WAAW,GAAG7C,uBAAuB,CAACe,MAAM,GAAG,CAAC,GAAG,CAAC,GAAGf,uBAAuB,CAAC,GAAG,CAAC,GAAGE,oBAAoB,CAAC;IAE/G,IAAI2C,WAAW,CAAC9B,MAAM,KAAK,CAAC,EAAE;MAC1B;MACA8B,WAAW,GAAG3C,oBAAoB,CAACa,MAAM,GAAG,CAAC,GAAG,CAAC,GAAGb,oBAAoB,CAAC,GAAG,CAAC;QAAEO,GAAG,EAAE,mBAAmB;QAAED,KAAK,EAAE;MAAK,CAAC,CAAC;IAC3H;IAEA,MAAMsC,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,WAAW,CAAC9B,MAAM,CAAC;IACrE,MAAMmC,SAAS,GAAGL,WAAW,CAACC,cAAc,CAAC;IAC7C7C,0BAA0B,CAAC4C,WAAW,CAACN,MAAM,CAAC,CAACY,CAAC,EAAEC,KAAK,KAAKA,KAAK,KAAKN,cAAc,CAAC,CAAC;IAEtFtE,mBAAmB,CAAC,EAAE,CAAC,CAAC,CAAC;IACzB+B,aAAa,CAAC2C,SAAS,CAAC;IACxB7C,aAAa,CAAC,WAAW,CAAC;EAC9B,CAAC;EAED,MAAMsC,YAAY,GAAIe,KAAK,IAAK;IAC5B,IAAI/C,eAAe,CAACmB,OAAO,EAAE;MACzB,MAAM6B,IAAI,GAAGhD,eAAe,CAACmB,OAAO,CAAC8B,qBAAqB,CAAC,CAAC;MAC5DrF,cAAc,CAACoF,IAAI,CAACE,IAAI,GAAGF,IAAI,CAACG,KAAK,GAAG,CAAC,EAAEH,IAAI,CAACI,GAAG,GAAGJ,IAAI,CAACK,MAAM,GAAG,CAAC,EAAEN,KAAK,CAAC;IACjF;EACJ,CAAC;EAED,MAAMO,eAAe,GAAGA,CAAA,KAAM;IAC1B;IACA,IAAI7D,UAAU,KAAK,OAAO,IAAIZ,gBAAgB,GAAG,CAAC,EAAE;MAChDiE,YAAY,CAAC,CAAC,CAAC,CAAC;IACpB,CAAC,MAAM;MACHzE,OAAO,CAAC,CAAC,CAAC,CAAC;IACf;EACJ,CAAC;EAED,MAAMkF,aAAa,GAAGA,CAAA,KAAM;IACxB,QAAQ9D,UAAU;MACd,KAAK,SAAS;MACd,KAAK,OAAO;MACZ,KAAK,WAAW;MAChB,KAAK,KAAK;QACN,oBACI1B,OAAA;UAAKyF,SAAS,EAAC,sBAAsB;UAAAC,QAAA,gBACjC1F,OAAA;YAAM2F,GAAG,EAAEzD,QAAS;YAACuD,SAAS,EAAC,cAAc;YAACG,IAAI,EAAC,KAAK;YAAC,cAAW,cAAc;YAAAF,QAAA,EAAE9D,UAAU,CAACE;UAAK;YAAA+D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAC5GhG,OAAA;YAAA0F,QAAA,EAAI9D,UAAU,CAACG;UAAG;YAAA8D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACvBhG,OAAA;YAAKyF,SAAS,EAAC,eAAe;YAAAC,QAAA,GACzBhE,UAAU,KAAK,SAAS,iBAAI1B,OAAA;cAAQiG,OAAO,EAAEtB,kBAAmB;cAAAe,QAAA,EAAC;YAAa;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EACvFtE,UAAU,KAAK,OAAO,iBAAI1B,OAAA;cAAQiG,OAAO,EAAErB,cAAe;cAAAc,QAAA,EAAC;YAAS;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EAC7EtE,UAAU,KAAK,WAAW,iBAAI1B,OAAA;cAAQyF,SAAS,EAAC,WAAW;cAACQ,OAAO,EAAE3F,OAAQ;cAAAoF,QAAA,EAAC;YAAI;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,EAC3FtE,UAAU,KAAK,KAAK,iBAAI1B,OAAA;cAAQiG,OAAO,EAAE5F,SAAU;cAAAqF,QAAA,EAAC;YAAI;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL,CAAC;MAEd,KAAK,QAAQ;MACb;QACI,oBACIhG,OAAA,CAAAE,SAAA;UAAAwF,QAAA,gBACI1F,OAAA;YAAA0F,QAAA,EAAKhF,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEwF;UAAQ;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eACpChG,OAAA;YAAKyF,SAAS,EAAC,aAAa;YAAAC,QAAA,GAAC,SAAO,EAAClF,KAAK,EAAC,KAAG,EAAC2B,SAAS;UAAA;YAAA0D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eAC/DhG,OAAA;YACI2F,GAAG,EAAE3D,QAAS;YACdmE,IAAI,EAAC,MAAM;YACXC,KAAK,EAAExF,UAAW;YAClByF,QAAQ,EAAGC,CAAC,IAAKzF,aAAa,CAACyF,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;YAC/CI,OAAO,EAAGF,CAAC,IAAKA,CAAC,CAACG,GAAG,KAAK,OAAO,IAAIlD,kBAAkB,CAAC,CAAE;YAC1DmD,WAAW,EAAC;UAAgB;YAAAb,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/B,CAAC,eACFhG,OAAA;YAAKyF,SAAS,EAAC,eAAe;YAAAC,QAAA,eAC1B1F,OAAA;cAAQiG,OAAO,EAAE1C,kBAAmB;cAAAmC,QAAA,EAAC;YAAM;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnD,CAAC;QAAA,eACR,CAAC;IAEf;EACJ,CAAC;EAED,oBACIhG,OAAA;IAAKyF,SAAS,EAAC,eAAe;IAAAC,QAAA,eAC1B1F,OAAA;MAAK2F,GAAG,EAAE1D,eAAgB;MAACwD,SAAS,EAAC,eAAe;MAAAC,QAAA,GAC/ChE,UAAU,KAAK,SAAS,IAAIA,UAAU,KAAK,WAAW,IAAIA,UAAU,KAAK,KAAK,iBAC3E1B,OAAA;QAAQyF,SAAS,EAAC,kBAAkB;QAACQ,OAAO,EAAEV,eAAgB;QAAC,cAAW,aAAa;QAAAG,QAAA,EAAC;MAExF;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACX,EACAR,aAAa,CAAC,CAAC;IAAA;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACf;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACzF,EAAA,CA9MIJ,SAAS;AAAAwG,EAAA,GAATxG,SAAS;AAgNf,eAAeA,SAAS;AAAC,IAAAwG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}