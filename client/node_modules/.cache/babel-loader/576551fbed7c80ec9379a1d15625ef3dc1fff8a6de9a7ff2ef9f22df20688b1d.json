{"ast":null,"code":"import _objectSpread from\"C:/Users/chanl/Documents/Kenneth/html/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import ImageRewardCard from'./ImageRewardCard.js';import MessageRewardCard from'./MessageRewardCard.js';import ImageDetailModal from'./ImageDetailModal.js';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const localQuotes=[{text:\"The only way to do great work is to love what you do.\",author:\"Steve Jobs\"},{text:\"Life is what happens to you while you're busy making other plans.\",author:\"John Lennon\"},{text:\"The purpose of our lives is to be happy.\",author:\"Dalai Lama\"},{text:\"Get busy living or get busy dying.\",author:\"Stephen King\"},{text:\"You only live once, but if you do it right, once is enough.\",author:\"Mae West\"}];const QuoteCard=_ref=>{let{unlockedReward}=_ref;const[quote,setQuote]=useState({text:'Loading...',author:''});const[source,setSource]=useState('local');// 'local' or 'api'\nconst[isImageModalOpen,setImageModalOpen]=useState(false);useEffect(()=>{const fetchQuote=async()=>{try{const response=await fetch(\"https://api.realinspire.live/v1/quotes/random\");if(!response.ok)throw new Error('Network response was not ok.');const data=await response.json();if(data&&data.length>0){setQuote({text:data[0].content,author:data[0].author});setSource('api');}else{throw new Error('API returned no data');}}catch(error){console.error(\"Failed to fetch API quote, using fallback:\",error);const fallbackQuote=localQuotes[Math.floor(Math.random()*localQuotes.length)];setQuote({text:fallbackQuote.text,author:fallbackQuote.author});setSource('local');}};fetchQuote();const intervalId=setInterval(fetchQuote,10000);return()=>clearInterval(intervalId);},[]);if(unlockedReward&&unlockedReward.content){const{imageUrl,messageBody}=unlockedReward.content;if(imageUrl){return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(ImageRewardCard,{imageUrl:imageUrl,title:unlockedReward.content.messageTitle,onClick:()=>setImageModalOpen(true)}),isImageModalOpen&&/*#__PURE__*/_jsx(ImageDetailModal,_objectSpread(_objectSpread({},unlockedReward.content),{},{body:unlockedReward.content.messageBody,onClose:()=>setImageModalOpen(false)}))]});}if(messageBody){return/*#__PURE__*/_jsx(MessageRewardCard,{title:unlockedReward.content.messageTitle,body:messageBody});}}return/*#__PURE__*/_jsxs(\"div\",{className:\"card quote-card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"quote-source-indicator \".concat(source,\"-source\")}),/*#__PURE__*/_jsx(\"blockquote\",{className:\"quote-text\",children:quote.text}),quote.author&&/*#__PURE__*/_jsxs(\"figcaption\",{className:\"quote-author\",children:[\"\\u2014 \",quote.author]})]});};export default QuoteCard;","map":{"version":3,"names":["React","useState","useEffect","ImageRewardCard","MessageRewardCard","ImageDetailModal","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","localQuotes","text","author","QuoteCard","_ref","unlockedReward","quote","setQuote","source","setSource","isImageModalOpen","setImageModalOpen","fetchQuote","response","fetch","ok","Error","data","json","length","content","error","console","fallbackQuote","Math","floor","random","intervalId","setInterval","clearInterval","imageUrl","messageBody","children","title","messageTitle","onClick","_objectSpread","body","onClose","className","concat"],"sources":["C:/Users/chanl/Documents/Kenneth/html/client/src/components/QuoteCard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport ImageRewardCard from './ImageRewardCard.js';\r\nimport MessageRewardCard from './MessageRewardCard.js';\r\nimport ImageDetailModal from './ImageDetailModal.js';\r\n\r\nconst localQuotes = [\r\n    { text: \"The only way to do great work is to love what you do.\", author: \"Steve Jobs\" },\r\n    { text: \"Life is what happens to you while you're busy making other plans.\", author: \"John Lennon\" },\r\n    { text: \"The purpose of our lives is to be happy.\", author: \"Dalai Lama\" },\r\n    { text: \"Get busy living or get busy dying.\", author: \"Stephen King\" },\r\n    { text: \"You only live once, but if you do it right, once is enough.\", author: \"Mae West\" },\r\n];\r\n\r\nconst QuoteCard = ({ unlockedReward }) => {\r\n    const [quote, setQuote] = useState({ text: 'Loading...', author: '' });\r\n    const [source, setSource] = useState('local'); // 'local' or 'api'\r\n    const [isImageModalOpen, setImageModalOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchQuote = async () => {\r\n            try {\r\n                const response = await fetch(\"https://api.realinspire.live/v1/quotes/random\");\r\n                if (!response.ok) throw new Error('Network response was not ok.');\r\n                \r\n                const data = await response.json();\r\n                if (data && data.length > 0) {\r\n                    setQuote({ text: data[0].content, author: data[0].author });\r\n                    setSource('api');\r\n                } else {\r\n                    throw new Error('API returned no data');\r\n                }\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch API quote, using fallback:\", error);\r\n                const fallbackQuote = localQuotes[Math.floor(Math.random() * localQuotes.length)];\r\n                setQuote({ text: fallbackQuote.text, author: fallbackQuote.author });\r\n                setSource('local');\r\n            }\r\n        };\r\n\r\n        fetchQuote();\r\n\r\n        const intervalId = setInterval(fetchQuote, 10000);\r\n\r\n        return () => clearInterval(intervalId);\r\n    }, []);\r\n\r\n    if (unlockedReward && unlockedReward.content) {\r\n        const { imageUrl, messageBody } = unlockedReward.content;\r\n\r\n        if (imageUrl) {\r\n            return (\r\n                <>\r\n                    <ImageRewardCard \r\n                        imageUrl={imageUrl} \r\n                        title={unlockedReward.content.messageTitle}\r\n                        onClick={() => setImageModalOpen(true)}\r\n                    />\r\n                    {isImageModalOpen && (\r\n                        <ImageDetailModal \r\n                            {...unlockedReward.content}\r\n                            body={unlockedReward.content.messageBody}\r\n                            onClose={() => setImageModalOpen(false)}\r\n                        />\r\n                    )}\r\n                </>\r\n            );\r\n        }\r\n        if (messageBody) {\r\n            return <MessageRewardCard title={unlockedReward.content.messageTitle} body={messageBody} />;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"card quote-card\">\r\n            <div className={`quote-source-indicator ${source}-source`}></div>\r\n            <blockquote className=\"quote-text\">{quote.text}</blockquote>\r\n            {quote.author && <figcaption className=\"quote-author\">â€” {quote.author}</figcaption>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default QuoteCard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}